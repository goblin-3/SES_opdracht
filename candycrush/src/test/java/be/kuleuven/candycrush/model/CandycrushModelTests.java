package be.kuleuven.candycrush.model;


import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import static org.junit.Assert.*;


public class CandycrushModelTests {


        @Test
    public void IfNoSurroundingCandyAreDifferentOnlyChangeOneCandy(){
            ArrayList<Candy> preMadeSpeelbord = new ArrayList<>(Arrays.asList(
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2)

            ));//prmadespeelbord generated by chatgpt

            CandycrushModel model = new CandycrushModel("Test");


            CandycrushModel.BoardSize boardSize =new CandycrushModel.BoardSize(4,4);

            model.setBoardSize(boardSize);

            model.setSpeelbord(preMadeSpeelbord);
            CandycrushModel.Position position = new CandycrushModel.Position(0,0,boardSize);

        model.candyWithIndexSelected(position);
            assertNotEquals(new Candy.NormalCandy(1),model.getSpeelbord().get(0));
            assertEquals(new Candy.NormalCandy(2), model.getSpeelbord().get(1));
            assertEquals(new Candy.NormalCandy(2), model.getSpeelbord().get(4));
            assertEquals(new Candy.NormalCandy(2), model.getSpeelbord().get(5));
    }



        @Test
        public void testSameSurroundingNumberGetsChangedInMiddle() {
            ArrayList<Candy> preMadeSpeelbord = new ArrayList<>(Arrays.asList(
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2)
            ));

            CandycrushModel model = new CandycrushModel("Test");

            CandycrushModel.BoardSize boardSize= new CandycrushModel.BoardSize(4,4);

            model.setBoardSize(boardSize);

            model.setSpeelbord(preMadeSpeelbord);

            CandycrushModel.Position position = new CandycrushModel.Position(1,1,boardSize);

            Candy originalValueAt5 = model.getSpeelbord().get(5);
            Candy originalValueAt1 = model.getSpeelbord().get(1);
            Candy originalValueAt2 = model.getSpeelbord().get(2);
            Candy originalValueAt4 = model.getSpeelbord().get(4);
            Candy originalValueAt6 = model.getSpeelbord().get(6);
            Candy originalValueAt8 = model.getSpeelbord().get(8);
            Candy originalValueAt9 = model.getSpeelbord().get(9);
            Candy originalValueAt10 = model.getSpeelbord().get(10);

            model.candyWithIndexSelected(position);


            Candy newValueAt5 = model.getSpeelbord().get(5);
            Candy newValueAt1 = model.getSpeelbord().get(1);
            Candy newValueAt2 = model.getSpeelbord().get(2);
            Candy newValueAt4 = model.getSpeelbord().get(4);
            Candy newValueAt6 = model.getSpeelbord().get(6);
            Candy newValueAt8 = model.getSpeelbord().get(8);
            Candy newValueAt9 = model.getSpeelbord().get(9);
            Candy newValueAt10 = model.getSpeelbord().get(10);

            assertNotEquals("The value at index 5 should be changed", originalValueAt5, newValueAt5);
            assertNotEquals("The value at index 1 should be changed", originalValueAt1, newValueAt1);
            assertEquals("The value at index 2 should not be changed", originalValueAt2, newValueAt2);
            assertNotEquals("The value at index 4 should be changed", originalValueAt4, newValueAt4);
            assertEquals("The value at index 6 should not be changed", originalValueAt6, newValueAt6);
            assertEquals("The value at index 8 should not be changed", originalValueAt8, newValueAt8);
            assertNotEquals("The value at index 9 should be changed", originalValueAt9, newValueAt9);
            assertEquals("The value at index 10 should not be changed", originalValueAt10, newValueAt10);
        }

        @Test
        public void testSameSurroundingNumberGetsChangedAtEdge() {
            ArrayList<Candy> preMadeSpeelbord = new ArrayList<>(Arrays.asList(
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2)
            ));

            CandycrushModel model = new CandycrushModel("Test");

            CandycrushModel.BoardSize boardSize= new CandycrushModel.BoardSize(4,4);
            model.setBoardSize(boardSize);

            model.setSpeelbord(preMadeSpeelbord);


            CandycrushModel.Position position = new CandycrushModel.Position(0,2,boardSize);

            Candy originalValueAt6 = model.getSpeelbord().get(6);
            Candy originalValueAt2 = model.getSpeelbord().get(2);
            model.candyWithIndexSelected(position);
            Candy newValueAt6 = model.getSpeelbord().get(6);
            Candy newValueAt2 = model.getSpeelbord().get(2);
            assertNotEquals(originalValueAt6,newValueAt6);
            assertNotEquals(originalValueAt2,newValueAt2);
        }

        @Test
        public void scoreGetsSetCorectly(){
            CandycrushModel model = new CandycrushModel("Test");
            model.setScore(5);
            assertEquals(5,model.getScore());
             }

        @Test
        public void whenOneCandyIsSelectedScoreUpdatesCorrectly(){
            ArrayList<Candy> preMadeSpeelbord = new ArrayList<>(Arrays.asList(
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2)
            ));

            CandycrushModel model = new CandycrushModel("Test");
            CandycrushModel.BoardSize boardSize= new CandycrushModel.BoardSize(4,4);
            model.setBoardSize(boardSize);

            model.setSpeelbord(preMadeSpeelbord);
            model.setScore(2);


            CandycrushModel.Position position = new CandycrushModel.Position(0,0,boardSize);

            model.candyWithIndexSelected(position);
            assertEquals(3,model.getScore());
        }


        @Test
        public void testMultipleCandyAreChangedScoreGetsKeptCorrectly() {
            ArrayList<Candy> preMadeSpeelbord = new ArrayList<>(Arrays.asList(
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(1), new Candy.NormalCandy(2), new Candy.NormalCandy(3), new Candy.NormalCandy(0),
                    new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2), new Candy.NormalCandy(2)
            ));

            CandycrushModel model = new CandycrushModel("Test");
            CandycrushModel.BoardSize boardSize= new CandycrushModel.BoardSize(4,4);
            model.setBoardSize(boardSize);

            model.setSpeelbord(preMadeSpeelbord);
            model.setScore(0);


            CandycrushModel.Position position = new CandycrushModel.Position(0,2,boardSize);

            model.candyWithIndexSelected(position);
            assertEquals(2,model.getScore());

        }

        @Test
        public void testNegativeIndexIsCheckedNothingHappens() {

            CandycrushModel.BoardSize boardSize= new CandycrushModel.BoardSize(4,4);

            assertThrows(IllegalArgumentException.class, () -> {new CandycrushModel.Position(-1, -1, boardSize);});

        }
        @Test
        public void testOutOfBoundsIndexIsCheckedNothingHappens() {


            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(4,4);

            assertThrows(IllegalArgumentException.class, () -> {new CandycrushModel.Position(9, 99, boardSize);});



        }
        @Test
        public void testScoreIsZeroAtStart(){
            CandycrushModel model = new CandycrushModel("Test");
            assertEquals(0,model.getScore());
        }
        @Test
        public void testNullGetsIgnoredInName(){
            CandycrushModel model = new CandycrushModel(null);
            assertNotEquals(true,model.isInitialized());
        }

        @Test
        public void testNameIsSavedCorrectly(){
            CandycrushModel model = new CandycrushModel("Test");
            assertEquals("Test",model.getSpeler());
        }

        @Test
        public  void testPositionToIndexCorrectlyAssigned(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(2,4);

            CandycrushModel.Position position1 = new CandycrushModel.Position(0,0,boardSize);


            assertEquals(position1.toIndex(),0);


            CandycrushModel.Position position2 = new CandycrushModel.Position(0,3,boardSize);

            assertEquals(position2.toIndex(),3);

            CandycrushModel.Position position3 = new CandycrushModel.Position(1,2,boardSize);

            assertEquals(position3.toIndex(),6);
        }

        @Test
        public  void  testPositionFromIndex(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(2,4);

            CandycrushModel.Position position1 = CandycrushModel.Position.fromIndex(0, boardSize);
            assertEquals(0, position1.row());
            assertEquals(0, position1.column());

            CandycrushModel.Position position3 = CandycrushModel.Position.fromIndex(6, boardSize);
            assertEquals(1, position3.row());
            assertEquals(2, position3.column());
        }
        @Test
        public void testNeighboursPositions(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(3,3);

            CandycrushModel.Position position = new CandycrushModel.Position(1,1,boardSize);
            Iterable<CandycrushModel.Position> neighbours = position.neighbourPositions();

            // lists of expected position generated by chatgpt
            int[] expectedRows = {0, 0, 0, 1, 1, 2, 2, 2};
            int[] expectedColumns = {0, 1, 2, 0, 2, 0, 1, 2};

            Iterator<CandycrushModel.Position> iterator = neighbours.iterator();
            int count = 0;
            while (iterator.hasNext()) {
                CandycrushModel.Position neighbour = iterator.next();
                assertEquals(expectedRows[count], neighbour.row());
                assertEquals(expectedColumns[count], neighbour.column());
                count++;
            }
            assertEquals(count ,8);
        }
        @Test
        public void testNeighboursPositionsNearEdge(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(3, 3);

            CandycrushModel.Position position = new CandycrushModel.Position(0,0,boardSize);

            Iterable<CandycrushModel.Position> neighbours = position.neighbourPositions();

            // lists of expected position generated by chatgpt
            int[] expectedRows = {0, 1, 1};
            int[] expectedColumns = {1, 0, 1};

            Iterator<CandycrushModel.Position> iterator = neighbours.iterator();
            int count = 0;

            while(iterator.hasNext()){
                CandycrushModel.Position neighbour = iterator.next();
                assertEquals(expectedRows[count],neighbour.row());
                assertEquals(expectedColumns[count],neighbour.column());
                count++;
            }
            assertEquals(count,3);
        }

        @Test
        public void testIsLastColumn(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(2,4);
            CandycrushModel.Position position = new CandycrushModel.Position(0,3,boardSize);
            CandycrushModel.Position position1 = new CandycrushModel.Position(0,2,boardSize);

            boolean isColumn = position.isLastColumn();
            boolean isColumn1 = position1.isLastColumn();
            assertEquals(isColumn,true);
            assertEquals(isColumn1,false);
        }

        @Test
        public void testReturnsAllPositionsInBoard(){
            CandycrushModel.BoardSize boardSize = new CandycrushModel.BoardSize(2,3);

            Iterable<CandycrushModel.Position> positions = boardSize.positions();

            int expectedPositionsAmount = boardSize.columns()*boardSize.rows();
            int actualPositionsAmount = 0;

            for (CandycrushModel.Position ignored : positions){
                actualPositionsAmount++;
            }
            assertEquals(expectedPositionsAmount,actualPositionsAmount);

            int expectedRow =0;
            int expectedColumn=0;

            for (CandycrushModel.Position position : positions){
                assertEquals(expectedRow, position.row());
                assertEquals(expectedColumn,position.column());


                expectedColumn++;
                if (expectedColumn >= boardSize.columns()){
                    if(expectedRow>= boardSize.rows()) break;else {


                        expectedColumn = 0;
                        expectedRow++;
                    }
                }

            }

        }
}
